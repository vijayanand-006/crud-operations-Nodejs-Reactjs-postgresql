Youtube link

https://www.youtube.com/watch?v=dYjdzpZv5yc


popup form

import Popup from "reactjs-popup";

  const [open, setOpen] = useState(false);

  const handleOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

<form>
<button onClick={handleOpen}>Login</button>
      <Popup open={open} onClose={handleClose}>
        <h2>Login</h2>
        <input type="text" placeholder="Username" />
        <input type="password" placeholder="Password" />
        <button type="submit">Login</button>
      </Popup>
</form>





// import code -----------------------------------------------------------------------------------------------------------------



import React, { useEffect, useState } from "react";
import { BsArrowUp, BsArrowDown, BsPencilSquare } from "react-icons/bs";
import { IoMdSearch } from "react-icons/io";
import {
  MdOutlineArrowBackIosNew,
  MdDeleteOutline,
  MdOutlineRemoveRedEye,
} from "react-icons/md";
import { TiWarning } from "react-icons/ti";
import { IoMdClose } from "react-icons/io";

const EmployeeList = () => {
  // useState to use get employee_list and store in array.
  const [empDetails, setEmpDetails] = useState([])
  // const [loading , setLoading] = useState(false)

  // -------------------------------------------------------------No of page show down in the table. ------------------------------------------

  // // number of row in the  employee list table
  // const [itemsPerPage, setitemsPerPage] = useState(10);

  // // set the column in ascending and descending order.
  // const [sortConfig, setSortConfig] = useState({
  //   column: "",
  //   direction: "ascending",
  // });

  // // Set adding page based on the table rows .
  // const [currentPage, setCurrentPage] = useState(1);
  // const [searchQuery, setSearchQuery] = useState("");

  // // function for the column will set ascending or descending order based on direaction.
  // const onSort = (key) => {
  //   let direction = "ascending";
  //   if (sortConfig.column === key && sortConfig.direction === "ascending") {
  //     direction = "descending";
  //   }
  //   setSortConfig({ column: key, direction });
  // };

  // // All data will be change based on there condition of ascending and descending.
  // const sortedEmployeeList = [...empDetails.employeeList].sort((a, b) => {
  //   if (sortConfig.direction === "ascending") {
  //     return a[sortConfig.column] > b[sortConfig.column] ? -1 : 1;
  //   } else {
  //     return a[sortConfig.column] < b[sortConfig.column] ? -1 : 1;
  //   }
  // });

  // // filder the data from the table using search query .
  // const filteredEmployeeList = sortedEmployeeList.filter((item) =>
  //   Object.values(item).some((value) =>
  //     value.toString().toLowerCase().includes(searchQuery.toLowerCase())
  //   )
  // );

  // // calculate how many pages are needed by dividing total number of records with per page count.
  // const startIndex = (currentPage - 1) * itemsPerPage;
  // const endIndex = startIndex + itemsPerPage;
  // const currentItems = filteredEmployeeList.slice(startIndex, endIndex);

  // const totalPages = Math.ceil(filteredEmployeeList.length / itemsPerPage);


  // -------------------------------------------------------------No of page show down in the table. ------------------------------------------

  // This function will be in fetch the api from the server to get the data from the database.
  useEffect(() => {
    const getEmpList = async () => {
      try {
        // setLoading(true)  
        let response = await fetch(
          "http://localhost:4000/api/get_employee_table_list"
        );
        // response is not success it will throw an error.
        if (response.status !== 200) {
          throw new Error("Error in getting employee details");
        }
        // wait and get the new data and update the field
        const newData = await response.json();
        setEmpDetails({ employeeList: newData });
      } catch (error) {
        console.log(`Error ${error}`);
      }
    };
    getEmpList();
  }, []);


  // ---------------------------------------------- Page handle next and back btn -------------------------------------------------------------

  //  Function for handling pagination , sorting and searching functionality.
  // const handlePageChange = (page) => {
  //   setCurrentPage(page);
  // };

  // function get
  // const goBack = () => {
  //   if (currentPage > 1) {
  //     setCurrentPage(currentPage - 1);
  //   }
  // };

  // const goNext = () => {
  //   if (currentPage < totalPages) {
  //     setCurrentPage(currentPage + 1);
  //   }
  // };

  // ---------------------------------------------- Page handle next and back btn -------------------------------------------------------------

  //--------------------------------------------- No. of row present in the row ---------------------------------------------------------------- 

  // const handlePageFilter = (selectedRowsPerPage) => {
  //   setitemsPerPage(selectedRowsPerPage);
  //   setCurrentPage(1); // Reset to the first page when changing the number of rows per page
  // };

  // const renderSorting = (column) => {
  //   if (sortConfig.column === column) {
  //     return sortConfig.direction === "ascending" ? (
  //       <BsArrowDown className="my-auto" />
  //     ) : (
  //       <BsArrowUp className="my-auto" />
  //     );
  //   }
  //   return null;
  // };


  //--------------------------------------------- No. of row present in the row ----------------------------------------------------------------


  // ------------------------------------- PopUp ------------------------------------------------------------------------

  // Popup states function
  const [showPopup, setShowPopup] = useState(false);

  // popup function is Open props
  const togglePopup = () => {
    setShowPopup(!showPopup);
  };

  const [updatePopup, setUpdatePopup] = useState(false);

  const updatePopups = () => {
    setUpdatePopup(!updatePopup);
  };

  // ------------------------------------- PopUp ------------------------------------------------------------------------

  const deleteUser = async (employee_id) => {
    try{
      const response = await fetch(`http://localhost:4000/api/detele_employee_table_list/${employee_id}` , {
        method: "DELETE",
      });
      if (response.status === 200){
        console.log("Delete Successfully");
        window.location.reload();
      }
      else {
        console.log("Deleting issuse");
      }
    }
      catch(error) {
        console.error(error ,"server Error");
      }
  } 

  const employee =({
    employeeList : []
});





  return (
    <div className="bg-[#072E33] h-screen overflow-auto">
      <div className="grid max-w-[1140px] mx-auto">
        <div className="my-10">
          <div className="flex justify-between bg-[#0F969C] p-3 my-auto border-black border-[1px]">
            <h1 className="text-2xl font-bold text-white select-none">
              Employee List
            </h1>
            <div className="flex my-auto rounded-md">
              {/* search the employee list from the table */}
              <input
                type="text"
                className="p-1 focus:outline-none"
                name="Search"
                id=""
                placeholder="Search Employee List"
                // value={searchQuery}
                // onChange={(e) => setSearchQuery(e.target.value)}
              />
              <button
                className="text-white p-1 bg-[#0c7075]"
                // onClick={() => setSearchQuery("")}
              >
                <IoMdSearch size={25} />
              </button>
            </div>

            <div className="flex gap-5">
              <div className="flex my-auto ">
                <select
                  id="pageSelector"
                  // value={itemsPerPage}
                  className="p-1 rounded-md w-12"
                  // onChange={(e) => handlePageFilter(Number(e.target.value))}
                >
                  {[5, 10, 20, 50].map((rows) => (
                    <option key={rows} value={rows}>
                      {rows}
                    </option>
                  ))}
                </select>
              </div>

              <a
                href="/employee_details"
                className="text-white bg-[#0c7075] p-2 rounded-md"
              >
                Add Employee
              </a>
            </div>
          </div>

          {/* Table for header name of columns */}
          <table className="w-full">
            <thead className="bg-[#0c7075] text-white">
              <tr className="text-center">
                <th
                  className="border-[1px] border-black w-52 p-2 cursor-pointer"
                  // onClick={() => onSort("employee_code")}
                >
                  <div className="flex justify-center gap-1">
                    Employee Code 
                    {/* {renderSorting("employee_code")} */}
                  </div>
                </th>
                <th
                  className="border-[1px] border-black p-2 cursor-pointer"
                  // onClick={() => onSort("employee_name")}
                >
                  <div className="flex justify-center gap-1 ">
                    Employee Name 
                    {/* {renderSorting("employee_name")} */}
                  </div>
                </th>
                <th
                  className="border-[1px] border-black p-2 cursor-pointer"
                  // onClick={() => onSort("country_name")}
                >
                  <div className="flex justify-center gap-1">
                    Country Name 
                    {/* {renderSorting("country_name")} */}
                  </div>
                </th>
                <th className="border-[1px] w-1/4 border-black p-2 select-none">
                  Action
                </th>
              </tr>
            </thead>

            {/* Getting all data show in the table formate */}
            <tbody className="text-center">
              {empDetails.map((item) => (
                <tr
                  className="odd:bg-[#0d343e] even:bg-[#0d3e43]"
                  key={item.employee_id}
                >
                  <td className="border-[1px] border-black text-white p-2">
                    {item.employee_code}
                  </td>
                  <td className="border-[1px] border-black text-left text-white p-2">
                    {item.employee_name}
                  </td>
                  <td className="border-[1px] border-black text-left text-white p-2">
                    {item.country_name}
                  </td>
                  <td className="border-[1px] border-black text-white p-2">
                    <div className="flex gap-1 justify-evenly">
                      <button className="p-1 bg-blue-500 hover:bg-blue-400 text-white rounded-md flex my-auto">
                        <MdOutlineRemoveRedEye
                          size={20}
                          className="my-auto pr-1"
                        />{" "}
                        View
                      </button>
                      <button
                        onClick={updatePopups}
                        className="p-1 bg-green-500 hover:bg-green-400 text-white rounded-md flex my-auto"
                      >
                        <BsPencilSquare size={20} className="my-auto pr-1" />{" "}
                        Update
                      </button>

                      {/* Update Popup  */}

      
                      <button
                      onClick={() => deleteUser(item.employee_id)}
                        // onClick={togglePopup}
                        className="p-1 pr-2 bg-red-500 hover:bg-red-400 text-white rounded-md flex my-auto"
                      >
                        <MdDeleteOutline size={23} className="my-auto" /> Delete
                      </button>

                      {/* Popup of delete confirmation */}
                      {showPopup && (
                        <div className="absolute top-1/2 left-1/2  transform -translate-x-1/2 -translate-y-1/2">
                          <div className="bg-[#FEFEFE] px-3 py-3 rounded-md">
                            <div className="text-right">
                              <button
                                onClick={togglePopup}
                                className="text-gray-700 text-2xl"
                              >
                                <IoMdClose />
                              </button>
                            </div>
                            <div className="flex flex-col gap-5 max-w-[500px] px-10 text-black">
                              <h1 className="text-center text-2xl font-bold">
                                Delete Employee ?
                              </h1>
                              <div className="text-center text-md">
                                <p className="">
                                  Are you sure do you want to delete the
                                  employee ?
                                </p>
                                <p className="">You can't undo this action.</p>
                              </div>
                              <div className="bg-[#FFCEB1] border-l-[4px] border-red-500 rounded-s-sm p-5">
                                <div className="flex ">
                                  <TiWarning className="my-auto text-red-600" />{" "}
                                  <h2 className="text-red-800">Warning</h2>
                                </div>
                                <div>
                                  If you delete the employee, you may lose of
                                  their information.
                                </div>
                              </div>
                              <div className="flex justify-center gap-5 pb-5 ">
                                <button
                                  onClick={togglePopup}
                                  className="bg-gray-700 hover:bg-gray-500 px-10 py-3 text-white rounded-3xl"
                                >
                                  Cancel
                                </button>
                                
                                <button className="bg-red-500 hover:bg-red-400 px-8 py-3  text-white rounded-3xl flex my-auto">
                                  <MdDeleteOutline
                                    size={20}
                                    className="my-auto"
                                  />{" "}
                                  Delete
                                </button>
                                
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          Pagination controls
          <div className="flex justify-center mt-5 text-white">
            {/* previous button hide and go back from last page  */}
            {/* <div className="flex pr-2">
              {currentPage > 1 && (
                <button onClick={goBack} className="flex my-auto">
                  {" "}
                  <MdOutlineArrowBackIosNew
                    size={15}
                    className=" my-auto"
                  />{" "}
                  Back
                </button>
              )}
            </div> */}
            {/*  Showing number of pages */}
            {/* {[...Array(totalPages)].map((_, index) => (
              <button
                key={index}
                onClick={() => handlePageChange(index + 1)}
                className={`mx-1 px-3 py-1 rounded ${
                  currentPage === index + 1
                    ? "bg-blue-500 text-white"
                    : "bg-gray-500"
                }`}
              > */}
                {/* {index + 1}
              </button> */}
            {/* ))}
            <div className="flex pl-2">
              {currentPage < totalPages && (
                <button onClick={goNext} className="flex my-auto">
                  {" "}
                  Next{" "}
                  <MdOutlineArrowBackIosNew
                    size={15}
                    className=" rotate-[180deg] my-auto"
                  />
                </button>
              )} */}
            </div>
          </div>
        </div>
      </div>
    // </div>
  );
};

export default EmployeeList;



// import code ------------------------------------------------------------------------------------------------------------------